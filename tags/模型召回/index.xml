<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>模型召回 on Aida’s home</title>
    <link>https://aida-yy.github.io/tags/%E6%A8%A1%E5%9E%8B%E5%8F%AC%E5%9B%9E/</link>
    <description>Recent content in 模型召回 on Aida’s home</description>
    <image>
      <url>https://aida-yy.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://aida-yy.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 20 Aug 2022 11:30:03 +0000</lastBuildDate><atom:link href="https://aida-yy.github.io/tags/%E6%A8%A1%E5%9E%8B%E5%8F%AC%E5%9B%9E/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>模型召回之DSSM</title>
      <link>https://aida-yy.github.io/posts/%E6%A8%A1%E5%9E%8B%E5%8F%AC%E5%9B%9E%E4%B9%8Bdssm/</link>
      <pubDate>Sat, 20 Aug 2022 11:30:03 +0000</pubDate>
      
      <guid>https://aida-yy.github.io/posts/%E6%A8%A1%E5%9E%8B%E5%8F%AC%E5%9B%9E%E4%B9%8Bdssm/</guid>
      <description>模型召回之DSSM 双塔模型
负样本构造：训练前构造或训练时批内构造
实现 model from transformers import AutoConfig,AutoTokenizer,TFAutoModel MODEL_NAME = &amp;#34;hfl/chinese-roberta-wwm-ext&amp;#34; tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME) config = AutoConfig.from_pretrained(MODEL_NAME) # backbone = TFAutoModel.from_pretrained(MODEL_NAME) # tokenizer.save_pretrained(&amp;#39;model&amp;#39;) # config.save_pretrained(&amp;#39;model&amp;#39;) # backbone.save_pretrained(&amp;#39;model&amp;#39;) class baseModel(tf.keras.Model): def __init__(self,MODEL_NAME,finetune=False,pooler=&amp;#34;avg&amp;#34;): super().__init__() self.pooler = pooler self.backbone = TFAutoModel.from_pretrained(MODEL_NAME) if not finetune: self.backbone.trainable = False print(&amp;#34;bert close&amp;#34;) self.dense_layer = tf.keras.layers.Dense(128) def call(self,inputs): x = self.backbone(inputs) if self.pooler == &amp;#34;cls&amp;#34;: x = x[1] elif self.pooler == &amp;#34;avg&amp;#34;: x = tf.reduce_mean(x[0],axis=1) elif self.</description>
    </item>
    
  </channel>
</rss>
